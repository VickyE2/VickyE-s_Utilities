/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */
import java.text.SimpleDateFormat
import java.util.*

plugins {
    `java-library` apply true
    `maven-publish` apply true
    signing apply true
    id("com.diffplug.spotless") version "6.19.0" apply true
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()
    }
}

allprojects {
    val javaVersion = 17
    val YEAR = 2024;
    group = "io.github.vickye2"
    description = "VickyE's Utility Mod"

    apply(plugin = "java")
    apply(plugin = "signing")
    apply(plugin = "java-library")
    apply(plugin = "maven-publish")
    apply(plugin = "com.diffplug.spotless")

    configure<com.diffplug.gradle.spotless.SpotlessExtension> {
        ratchetFrom("origin/master")

        format("misc") {
            target(".gitignore")
            trimTrailingWhitespace()
            endWithNewline()
            indentWithTabs()
            indentWithSpaces(6)
        }

        kotlin {
            target("src/main/kotlin/**/*.kt")
            licenseHeader("/* Licensed under Apache-2.0 $YEAR. */")
        }

        java {
            target("src/main/java/**/*.java")
            importOrder(
                "java", "javax", "org", "com", "com.diffplug", "", "#com.diffplug", "#"
            )
            removeUnusedImports()
            formatAnnotations()
            eclipse()
            licenseHeader("/* Licensed under Apache-2.0 \$YEAR. */")
        }
    }

    dependencies {
        // implementation(kotlin("stdlib-jdk8"))
        api("org.reflections:reflections:0.10.2")
    }

    tasks.withType<JavaCompile> {
        options.encoding = "UTF-8"
    }

    tasks.withType<Javadoc> {
        options.encoding = "UTF-8"
    }

    tasks.register<Jar>("sourcesJar") {
        archiveClassifier.set("sources")
        from(sourceSets.main.get().allSource)
    }

    tasks.register<Jar>("javadocJar") {
        archiveClassifier.set("javadoc")
        from(tasks.javadoc)
    }

    tasks.named<Jar>("jar") {
        enabled = true
    }

    java {
        sourceCompatibility = JavaVersion.toVersion(javaVersion)
        targetCompatibility = JavaVersion.toVersion(javaVersion)
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(javaVersion))
        }
    }
}

subprojects {
    tasks.register<Jar>("noObfJar") {
        archiveClassifier.set("") // no classifier, your “normal” jar
        from(sourceSets.main.get().output)

        manifest {
            attributes(
                mapOf(
                    "Specification-Title" to project.findProperty("mod_id"),
                    "Specification-Vendor" to project.findProperty("mod_authors"),
                    "Specification-Version" to "1", // We are version 1 of ourselves
                    "Implementation-Title" to project.name,
                    "Implementation-Version" to archiveVersion.get(),
                    "Implementation-Vendor" to project.findProperty("mod_authors"),
                    "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date())
                )
            )
        }
    }
    tasks.register<Jar>("obfJar") {
        archiveClassifier.set("mapped_official")
        from(sourceSets.main.get().output)

        manifest {
            attributes(
                mapOf(
                    "Specification-Title" to project.findProperty("mod_id"),
                    "Specification-Vendor" to project.findProperty("mod_authors"),
                    "Implementation-Vendor" to project.findProperty("mod_authors"),
                    "Specification-Version" to "1",
                    "Implementation-Title" to project.name,
                    "Implementation-Version" to archiveVersion.get(),
                    "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date())
                )
            )
        }
    }
    tasks.jar {
        enabled = false
    }

    afterEvaluate {
        publishing {
            publications {
                withType<MavenPublication>().configureEach {
                    artifactId = "vicky-utils-${
                        when {
                            project.name.startsWith("paper") -> "bukkit"
                            project.name.startsWith("fabric") -> "fabric"
                            project.name.startsWith("forge") -> "forge"
                            project.name == "shared" -> "core"
                            else -> "defaulted"
                        }
                    }"
                }
                create<MavenPublication>("mavenNormal") {
                    artifact(tasks.named("noObfJar")) {
                        builtBy(tasks.named("noObfJar"))
                    }
                    artifact(tasks.named("javadocJar"))
                    artifact(tasks.named("sourcesJar"))

                    groupId = "io.github.vickye2"

                    artifactId = when {
                        project.name.startsWith("paper") -> "vicky-utils-bukkit"
                        project.name.startsWith("fabric") -> "vicky-utils-fabric"
                        project.name.startsWith("forge") -> "vicky-utils-forge"
                        project.name == "shared" -> "vicky-utils-core"
                        else -> project.name
                    }

                    version = project.version.toString()
                    pom {
                        packaging = "jar"
                        withXml {
                            val dependenciesNode = asNode().appendNode("dependencies")
                            val seen = mutableSetOf<String>()

                            fun addDep(scope: String, dep: Dependency) {
                                val gid = dep.group.orEmpty()
                                val aid = dep.name
                                val ver = dep.version.orEmpty()
                                val key = "$gid:$aid:$ver"

                                if (seen.add(key)) {
                                    val depNode = dependenciesNode.appendNode("dependency")
                                    depNode.appendNode("groupId", gid)
                                    depNode.appendNode("artifactId", aid)
                                    depNode.appendNode("version", ver)
                                    depNode.appendNode("scope", scope)
                                }
                            }

                            configurations.api.get().dependencies.forEach { addDep("compile", it) }
                            configurations.implementation.get().dependencies.forEach { addDep("compile", it) }
                            configurations.compileOnly.get().dependencies.forEach { addDep("provided", it) }
                            configurations.runtimeOnly.get().dependencies.forEach { addDep("runtime", it) }
                        }
                        name.set("Vicky's Utilities ${
                            when {
                                project.name.startsWith("paper") -> "Bukkit"
                                project.name.startsWith("fabric") -> "Fabric"
                                project.name.startsWith("forge") -> "Forge"
                                project.name == "shared" -> "Core"
                                else -> "Defaulted"
                            }
                        }")
                        description.set(
                            "Custom utilities for Minecraft ${
                                when {
                                    project.name.startsWith("paper") -> "Bukkit Plugins"
                                    project.name.startsWith("fabric") -> "Fabric Mods"
                                    project.name.startsWith("forge") -> "Forge Mods"
                                    project.name == "shared" -> "Core"
                                    else -> project.name
                                }
                            }."
                        )
                        inceptionYear.set("2024")
                        url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                        licenses {
                            license {
                                name.set("MIT License")
                                url.set("https://opensource.org/licenses/MIT")
                            }
                        }
                        developers {
                            developer {
                                id.set("vickye")
                                name.set("VickyE2")
                                url.set("https://github.com/VickyE2/")
                                email.set("f.b.cgamingco@gmail.com")
                            }
                        }
                        scm {
                            connection.set("scm:git:git://github.com/VickyE2/VickyE-s_Utilities.git")
                            developerConnection.set("scm:git:ssh://github.com/VickyE2/VickyE-s_Utilities.git")
                            url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                        }
                    }
                }
                create<MavenPublication>("mavenObfMapped") {
                    artifact(tasks.named("obfJar")) {
                        builtBy(tasks.named("obfJar"))
                    }
                    artifact(tasks.named("javadocJar"))
                    artifact(tasks.named("sourcesJar"))

                    groupId = "io.github.vickye2"

                    artifactId = when {
                        project.name.startsWith("paper") -> "vicky-utils-bukkit"
                        project.name.startsWith("fabric") -> "vicky-utils-fabric"
                        project.name.startsWith("forge") -> "vicky-utils-forge"
                        project.name == "shared" -> "vicky-utils-core"
                        else -> project.name
                    }

                    version =
                        project.version.toString() + "_mapped_official_" + (project.findProperty("minecraft_version")
                            ?: "1.20.4").toString()
                    pom {
                        packaging = "jar"
                        withXml {
                            val dependenciesNode = asNode().appendNode("dependencies")
                            val seen = mutableSetOf<String>()

                            fun addDep(scope: String, dep: Dependency) {
                                val gid = dep.group.orEmpty()
                                val aid = dep.name
                                val ver = dep.version.orEmpty()
                                val key = "$gid:$aid:$ver"

                                if (seen.add(key)) {
                                    val depNode = dependenciesNode.appendNode("dependency")
                                    depNode.appendNode("groupId", gid)
                                    depNode.appendNode("artifactId", aid)
                                    depNode.appendNode("version", ver)
                                    depNode.appendNode("scope", scope)
                                }
                            }

                            configurations.api.get().dependencies.forEach { addDep("compile", it) }
                            configurations.implementation.get().dependencies.forEach { addDep("compile", it) }
                            configurations.compileOnly.get().dependencies.forEach { addDep("provided", it) }
                            configurations.runtimeOnly.get().dependencies.forEach { addDep("runtime", it) }
                        }
                        name.set(
                            "Vicky's Utilities ${
                                when {
                                    project.name.startsWith("paper") -> "Bukkit"
                                    project.name.startsWith("fabric") -> "Fabric"
                                    project.name.startsWith("forge") -> "Forge"
                                    project.name == "shared" -> "Core"
                                    else -> "Defaulted"
                                }
                            }"
                        )
                        description.set(
                            "Custom utilities for Minecraft ${
                                when {
                                    project.name.startsWith("paper") -> "Bukkit Plugins"
                                    project.name.startsWith("fabric") -> "Fabric Mods"
                                    project.name.startsWith("forge") -> "Forge Mods"
                                    project.name == "shared" -> "Core"
                                    else -> project.name
                                }
                            }."
                        )
                        inceptionYear.set("2024")
                        url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                        licenses {
                            license {
                                name.set("MIT License")
                                url.set("https://opensource.org/licenses/MIT")
                            }
                        }
                        developers {
                            developer {
                                id.set("vickye")
                                name.set("VickyE2")
                                url.set("https://github.com/VickyE2/")
                                email.set("f.b.cgamingco@gmail.com")
                            }
                        }
                        scm {
                            connection.set("scm:git:git://github.com/VickyE2/VickyE-s_Utilities.git")
                            developerConnection.set("scm:git:ssh://github.com/VickyE2/VickyE-s_Utilities.git")
                            url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                        }
                    }
                }
            }

            repositories {
                mavenLocal()
                /*
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/VickyE2/VickyE-s_Utilities")
                    credentials {
                        username = project.findProperty("gpr.user") as String? ?: System.getenv("GITHUB_ACTOR")
                        password = project.findProperty("gpr.key") as String? ?: System.getenv("GITHUB_TOKEN")
                    }
                }*/
            }
        }
        signing {
            useInMemoryPgpKeys(
                project.findProperty("signing.SIGNING_KEY_ID") as String? ?: System.getenv("SIGNING_KEY_ID") as String,
                project.findProperty("signing.SIGNING_KEY") as String? ?: System.getenv("SIGNING_KEY"),
                project.findProperty("signing.SIGNING_PASSWORD") as String?
                    ?: System.getenv("SIGNING_PASSWORD") as String
            )
            sign(the<PublishingExtension>().publications["mavenNormal"])
            sign(the<PublishingExtension>().publications["mavenObfMapped"])
        }
    }
}
