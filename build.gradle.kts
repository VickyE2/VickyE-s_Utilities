import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin
import java.nio.file.Paths

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    `java-library` apply true
    `maven-publish` apply true
    //id("com.vanniktech.maven.publish.base") version "0.34.0" apply true
    signing apply true
    kotlin("jvm") version "2.1.10" apply true
    id("com.diffplug.spotless") version "6.19.0" apply true
    id("io.github.goooler.shadow") version "8.1.8" apply true
    // id("org.jetbrains.dokka") version "1.9.10" apply true
}

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

allprojects {
    val javaVersion = 21
    val YEAR = 2024;
    group = "io.github.vickye2"
    description = "VickyE's Utility Mod"

    apply(plugin = "java")
    apply(plugin = "kotlin")
    apply(plugin = "signing")
    apply(plugin = "java-library")
    apply(plugin = "maven-publish")
    apply(plugin = "com.diffplug.spotless")
    apply(plugin = "io.github.goooler.shadow")
    // apply("org.jetbrains.dokka")

    configure<com.diffplug.gradle.spotless.SpotlessExtension> {
        ratchetFrom("origin/master")

        format("misc") {
            target(".gitignore")
            trimTrailingWhitespace()
            endWithNewline()
            indentWithTabs()
            indentWithSpaces(6)
        }

        kotlin {
            target("src/main/kotlin/**/*.kt")
            licenseHeader("/* Licensed under Apache-2.0 $YEAR. */")
        }

        java {
            target("src/main/java/**/*.java")
            importOrder(
                "java", "javax", "org", "com", "com.diffplug", "", "#com.diffplug", "#"
            )
            removeUnusedImports()
            formatAnnotations()
            eclipse()
            licenseHeader("/* Licensed under Apache-2.0 \$YEAR. */")
        }
    }

    dependencies {
        implementation(kotlin("stdlib-jdk8"))
        api("org.reflections:reflections:0.10.2")
    }

    tasks.jar {
        archiveBaseName.set("VickyUtils")
    }

    tasks.withType<JavaCompile> {
        options.encoding = "UTF-8"
    }

    tasks.withType<Javadoc> {
        options.encoding = "UTF-8"
    }

    plugins.withType<KotlinPlatformJvmPlugin> {
        tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
            kotlinOptions {
                jvmTarget = "$javaVersion"
            }
        }
    }

    /*
    tasks.dokkaHtml {
        outputDirectory.set(buildDir.resolve("dokka"))
    }
     */

    tasks.register<Jar>("sourcesJar") {
        archiveClassifier.set("sources")
        from(sourceSets.main.get().allSource)
    }

    tasks.register<Jar>("javadocJar") {
        archiveClassifier.set("javadoc")
        from(tasks.javadoc)
    }

    kotlin {
        jvmToolchain(javaVersion)
    }

    java {
        sourceCompatibility = JavaVersion.toVersion(javaVersion)
        targetCompatibility = JavaVersion.toVersion(javaVersion)
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(javaVersion))
        }
    }

    tasks.named<Jar>("jar") {
        enabled = false
    }
}

subprojects {
    afterEvaluate {
        publishing {
            publications {
                withType<MavenPublication>().configureEach {
                    artifactId = "vicky-utils-${
                        when {
                            project.name.startsWith("paper") -> "bukkit"
                            project.name.startsWith("fabric") -> "fabric"
                            project.name.startsWith("forge") -> "forge"
                            project.name == "shared" -> "core"
                            else -> "defaulted"
                        }
                    }"
                }
                create<MavenPublication>("maven") {
                    if (tasks.findByName("shadowJar") != null) {
                        artifact(tasks.named("shadowJar").get()) {
                            classifier = null
                        }
                    } else {
                        from(components["java"])
                    }
                    artifact(tasks.named("javadocJar"))
                    artifact(tasks.named("sourcesJar"))

                    groupId = project.group as String

                    artifactId = when {
                        project.name.startsWith("paper") -> "vicky-utils-bukkit"
                        project.name.startsWith("fabric") -> "vicky-utils-fabric"
                        project.name.startsWith("forge") -> "vicky-utils-forge"
                        project.name == "shared" -> "vicky-utils-core"
                        else -> project.name
                    }

                    version = project.version.toString()

                    pom {
                        name.set("Vicky's Utilities ${
                            when {
                                project.name.startsWith("paper") -> "Bukkit"
                                project.name.startsWith("fabric") -> "Fabric"
                                project.name.startsWith("forge") -> "Forge"
                                project.name == "shared" -> "Core"
                                else -> "Defaulted"
                            }
                        }")
                        description.set(
                            "Custom utilities for Minecraft ${
                                when {
                                    project.name.startsWith("paper") -> "Bukkit Plugin"
                                    project.name.startsWith("fabric") -> "Fabric Mod"
                                    project.name.startsWith("forge") -> "Forge Mod"
                                    project.name == "shared" -> "Core"
                                    else -> project.name
                                }
                            }."
                        )
                        inceptionYear.set("2024")
                        url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                        licenses {
                            license {
                                name.set("MIT License")
                                url.set("https://opensource.org/licenses/MIT")
                            }
                        }
                        developers {
                            developer {
                                id.set("vickye")
                                name.set("VickyE2")
                                url.set("https://github.com/VickyE2/")
                                email.set("f.b.cgamingco@gmail.com")
                            }
                        }
                        scm {
                            connection.set("scm:git:git://github.com/VickyE2/VickyE-s_Utilities.git")
                            developerConnection.set("scm:git:ssh://github.com/VickyE2/VickyE-s_Utilities.git")
                            url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                        }
                    }
                }
            }

            repositories {
                mavenLocal()
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/VickyE2/VickyE-s_Utilities")
                    credentials {
                        username = project.findProperty("gpr.user") as String? ?: System.getenv("GITHUB_ACTOR")
                        password = project.findProperty("gpr.key") as String? ?: System.getenv("GITHUB_TOKEN")
                    }
                }
                /*maven {
                    name = "OSSRH"
                    url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                    credentials {
                        username = findProperty("ossrhUsername") as String? ?: System.getenv("ossrhUsername")
                        password = findProperty("ossrhPassword") as String? ?: System.getenv("ossrhPassword")
                    }
                }*/
            }
        }
        signing {
            val signingKey = Paths.get((findProperty("signing.secretKeyRingFile") as String)).toFile().readText()
            println(signingKey)
            useInMemoryPgpKeys(
                findProperty("signing.keyId") as String,
                signingKey,
                findProperty("signing.password") as String
            )
            sign(the<PublishingExtension>().publications["maven"])
        }

        tasks.named<ShadowJar>("shadowJar") {
            archiveBaseName.set("VickyE-Utils-${
                when {
                    project.name.startsWith("paper") -> "Bukkit"
                    project.name.startsWith("fabric") -> "Fabric"
                    project.name.startsWith("forge") -> "Forge"
                    project.name == "shared" -> "Core"
                    else -> "Defaulted"
                }}")
            version = project.version
            configurations = listOf(
                project.configurations.runtimeClasspath.get(),
            )
            archiveClassifier.set("")
            mergeServiceFiles()
            minimize()
        }
        /*mavenPublishing {
            publishToMavenCentral()
            signAllPublications()
            configure(JavaLibrary(JavadocJar.Javadoc()))
            coordinates(
                project.group as String,
                when {
                    project.name.startsWith("paper") -> "vicky-utils-bukkit"
                    project.name.startsWith("fabric") -> "vicky-utils-fabric"
                    project.name.startsWith("forge") -> "vicky-utils-forge"
                    project.name == "shared" -> "vicky-utils-core"
                    else -> project.name
                },
                project.version.toString()
            )

            pom {
                name.set("Vicky's Utilities ${when {
                    project.name.startsWith("paper") -> "Bukkit"
                    project.name.startsWith("fabric") -> "Fabric"
                    project.name.startsWith("forge") -> "Forge"
                    project.name == "shared" -> "Core"
                    else -> "Defaulted"
                }}")
                description.set("Custom utilities for Minecraft ${when {
                    project.name.startsWith("paper") -> "Bukkit Plugin"
                    project.name.startsWith("fabric") -> "Fabric Mod"
                    project.name.startsWith("forge") -> "Forge Mod"
                    project.name == "shared" -> "Core"
                    else -> project.name
                }}.")
                inceptionYear.set("2024")
                url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }
                developers {
                    developer {
                        id.set("vickye")
                        name.set("VickyE2")
                        url.set("https://github.com/VickyE2/")
                        email.set("f.b.cgamingco@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/VickyE2/VickyE-s_Utilities.git")
                    developerConnection.set("scm:git:ssh://github.com/VickyE2/VickyE-s_Utilities.git")
                    url.set("https://github.com/VickyE2/VickyE-s_Utilities")
                }
            }
        }*/
        /*
        publishing {
            publications {
                create<MavenPublication>("gpr") {

                }
            }
            repositories {
                // mavenLocal()
                maven {
                    name = "Central"
                    url = uri("https://central.sonatype.com/api/v1/publish")
                    credentials {
                        username = project.findProperty("centralUsername") as String
                        password = project.findProperty("centralPassword") as String
                    }
                }
                /*
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/VickyE2/VickyE-s_Utilities")
                    credentials {
                        username = project.findProperty("gpr.user") as String? ?: System.getenv("GITHUB_ACTOR")
                        password = project.findProperty("gpr.key") as String? ?: System.getenv("GITHUB_TOKEN")
                    }
                }
                 */
            }
        }
        signing {
            val signingKey = Paths.get((findProperty("signing.secretKeyRingFile") as String)).toFile().readText()
            // println(signingKey)
            useInMemoryPgpKeys(
                findProperty("signing.keyId") as String,
                signingKey,
                findProperty("signing.password") as String
            )
            sign(the<PublishingExtension>().publications["gpr"])
        }
        */
    }
}
