import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin
import org.jetbrains.kotlin.gradle.targets.js.binaryen.BinaryenRootPlugin.Companion.kotlinBinaryenExtension

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    `java-library` apply true
    `maven-publish` apply true
    kotlin("jvm") version "2.1.10" apply true
    id("com.diffplug.spotless") version "6.19.0" apply true
    id("io.github.goooler.shadow") version "8.1.8" apply true
}

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

allprojects {
    val javaVersion = 21
    val YEAR = 2024;
    group = "org.vicky.vicky_utils"
    description = "VickyE's Utility Mod"

    apply(plugin = "java")
    apply(plugin = "kotlin")
    apply(plugin = "java-library")
    apply(plugin = "maven-publish")
    apply(plugin = "com.diffplug.spotless")
    apply(plugin = "io.github.goooler.shadow")

    configure<com.diffplug.gradle.spotless.SpotlessExtension> {
        ratchetFrom("origin/master")

        format("misc") {
            target(".gitignore")
            trimTrailingWhitespace()
            endWithNewline()
            indentWithTabs()
            indentWithSpaces(6)
        }

        kotlin {
            target("src/main/kotlin/**/*.kt")
            licenseHeader("/* Licensed under Apache-2.0 $YEAR. */")
        }

        java {
            target("src/main/java/**/*.java")
            importOrder(
                "java", "javax", "org", "com", "com.diffplug", "", "#com.diffplug", "#"
            )
            removeUnusedImports()
            formatAnnotations()
            eclipse()
            licenseHeader("/* Licensed under Apache-2.0 \$YEAR. */")
        }
    }

    dependencies {
        implementation(kotlin("stdlib-jdk8"))
        api("org.reflections:reflections:0.10.2")
    }

    tasks.jar {
        archiveBaseName.set("VickyUtils")
    }

    tasks.withType<JavaCompile> {
        options.encoding = "UTF-8"
    }

    tasks.withType<Javadoc> {
        options.encoding = "UTF-8"
    }

    plugins.withType<KotlinPlatformJvmPlugin> {
        tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
            kotlinOptions {
                jvmTarget = "$javaVersion"
            }
        }
    }

    kotlin {
        jvmToolchain(javaVersion)
    }

    java {
        sourceCompatibility = JavaVersion.toVersion(javaVersion)
        targetCompatibility = JavaVersion.toVersion(javaVersion)
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(javaVersion))
        }
    }
}

subprojects {
    apply(plugin = "maven-publish")

    afterEvaluate {
        tasks.named<ShadowJar>("shadowJar") {
            archiveBaseName.set("VickyE-Utils")
            version = project.version
            configurations = listOf(
                project.configurations.runtimeClasspath.get(),
            )
            // Optional: merge services (for reflection, slf4j etc.)
            mergeServiceFiles()
            minimize()
        }

        publishing {
            publications {
                create<MavenPublication>("gpr") {
                    groupId = project.group as String

                    artifactId =  when {
                        project.name.startsWith("paper") -> "vicky-utils-bukkit"
                        project.name.startsWith("fabric") -> "vicky-utils-fabric"
                        project.name.startsWith("forge") -> "vicky-utils-forge"
                        project.name == "shared" -> "vicky-utils-core"
                        else -> project.name
                    }

                    version = project.version.toString()

                    if (tasks.findByName("shadowJar") != null) {
                        artifact(tasks.named("shadowJar").get())
                    } else {
                        from(components["java"])
                    }
                }
            }

            repositories {
                mavenLocal()
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/VickyE2/VickyE-s_Utilities")
                    credentials {
                        username = project.findProperty("gpr.user") as String? ?: System.getenv("GITHUB_ACTOR")
                        password = project.findProperty("gpr.key") as String? ?: System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
    }
}
